{"version":3,"sources":["style.js","components/TotalResults.jsx","components/QuizAnswers.jsx","components/QuizCate.jsx","App.js","reportWebVitals.js","index.js"],"names":["styles","paper","padding","marginTop","marginBottom","borderRadius","h1","fontSize","textAlign","color","header","submitButton","background","backgroundColor","question","fontWeight","lineHeight","answer","marginLeft","display","correctAnswer","results","margin","maxWidth","flexDirection","difficulties","id","name","createMarkup","text","__html","TotalResults","classes","resetQuiz","currentQuizStep","admittedAnswers","myAnswers","checker","totalRightAnswers","useEffect","window","scrollTo","className","Typography","variant","filter","isCorrect","length","Title","Button","onClick","QuizAnswers","quizData","setCurrentQuizStep","useState","selectedAnswers","setSelectedAnswers","setProcessedAnswers","relatedAnswer","relatedQuestion","find","onSubmit","e","preventDefault","map","category","correct_answer","wrongAnswer","Grid","item","xs","quiz","Paper","dangerouslySetInnerHTML","FormControl","fullWidth","InputLabel","Select","required","label","value","labelId","onChange","selectedQuestion","target","isExistQuestion","updatedAnswers","handleAnswerChange","answers","MenuItem","type","useStyles","React","Component","makeStyles","theme","QuizCategories","categories","setCategories","setCategory","quizNumber","setQuizNumber","difficulty","setDifficulty","setQuizData","fetchQuizData","a","url","toLowerCase","axios","get","data","formattedCategory","cat","incorrectAnswersIndexes","incorrect_answers","randomIndex","Math","round","random","splice","console","log","fetchCategories","trivia_categories","mainTitle","container","spacing","title","selectedCategory","TextField","inputProps","min","max","App","QuizCate","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.52238bb4.chunk.js","sourcesContent":["export const styles = {\n    paper: {\n      padding: \"20px\",\n      marginTop: \"20px\",\n      marginBottom: \"20px\",\n      borderRadius: \"20px\",\n     \n    },\n    h1:\n    { fontSize: \"80px\",\n    marginBottom: \"50px\",\n    textAlign: \"center\",\n    color: \"purple\"\n\n    },\n    header: {\n        fontSize: \"70px\",\n        marginBottom: \"50px\",\n        textAlign: \"center\",\n        color: \"black\"\n     \n    },\n   \n   \n\n    submitButton: {\n      marginTop: \"40px\",\n      borderRadius: \"999px\",\n      background: \"#9c27b0\",\n      \"&:hover\": {\n        backgroundColor: \"white\",\n        \n      },\n    },\n    question: {\n      fontSize: \"24px\",\n      marginBottom: \"30px\",\n      fontWeight: \"500\",\n      lineHeight: \"40px\",\n    },\n    answer: {\n      fontSize: \"18px\",\n      marginBottom: \"10px\",\n      fontWeight: \"500\",\n      lineHeight: \"25px\",\n      marginLeft: \"10px\",\n      display: \"flex\",\n    },\n    correctAnswer: {\n      color: \"green\",\n    },\n    results: {\n      display: \"flex\",\n      margin: \"0 auto\",\n      maxWidth: \"200px\",\n      textAlign: \"center\",\n      flexDirection: \"column\",\n      color: \"black\"\n    },\n  };\n  \n  export const difficulties = [\n    { id: \"total_easy_question_count\", name: \"Go easy on me pls\" },\n    { id: \"total_medium_question_count\", name: \"Medium\" },\n    { id: \"total_hard_question_count\", name: \"ðŸ˜³ Hard ðŸ˜³\" },\n  ];\n  \n  export const createMarkup = (text) => {\n    return { __html: text };\n  };","import { Button, Typography } from \"@material-ui/core\";\n\nimport { useEffect } from \"react\";\n\nconst TotalResults = ({\n  classes,\n  resetQuiz,\n  currentQuizStep,\n  admittedAnswers,\n  myAnswers,\n  checker,\n  totalRightAnswers\n  \n}) => {\n  useEffect(() => {\n    window.scrollTo(0, \"30px\");\n  }, []);\n  return currentQuizStep === \"results\" ? (\n    <div className={classes.results}>\n      <Typography variant=\"h4\" className={classes.header}>\n        Results: {admittedAnswers.filter(({ isCorrect }) => isCorrect).length} out of{\" \"}{admittedAnswers.length}\n      </Typography>\n      <Typography variant=\"h4\" className={classes.Title}>\n       \n      </Typography>\n      <Typography variant=\"h3\" className={classes.Title}>\n        \n      </Typography>\n      \n      <Typography variant=\"h9\">\n       \n      </Typography>\n      <Typography variant=\"h9\">\n        Do you want to play again? Click Reset below!\n      </Typography>\n      \n      <Button\n        onClick={resetQuiz}\n        className={classes.submitButton}\n        variant='outlined'\n        color=\"white\"\n      >\n        Reset\n      </Button>\n    </div>\n  ) : (\n   <checkCode\n    />\n  );\n};\n\nexport default TotalResults;\n","import {\n    Grid,\n    Paper,\n    Select,\n    Button,\n    MenuItem,\n    Typography,\n    InputLabel,\n    FormControl,\n  } from \"@material-ui/core\";\n  import { useState, useEffect } from \"react\";\n  import { createMarkup } from \"../style\";\n  import TotalResults from \"./TotalResults\";\n  \n  const QuizAnswers = ({\n    classes,\n    quizData,\n    resetQuiz,\n    currentQuizStep,\n    setCurrentQuizStep,\n  }) => {\n    const [selectedAnswers, setSelectedAnswers] = useState([]);\n    const [admittedAnswers, setProcessedAnswers] = useState([]);\n  \n    const handleResult = (e) => {\n      e.preventDefault();\n  \n      const admittedAnswers = selectedAnswers.map(({ answer, question }) => {\n        const relatedQuestion = quizData.find(\n          (category) => category.question === question\n        );\n        if (relatedQuestion.correct_answer === answer) {\n          return { correctAnswer: answer, isCorrect: true, question };\n        }\n        return {\n          correctAnswer: relatedQuestion.correct_answer,\n          wrongAnswer: answer,\n          isCorrect: false,\n          question,\n        };\n      });\n  \n      setProcessedAnswers(admittedAnswers);\n    };\n  \n    const handleAnswerChange = (e, selectedQuestion) => {\n      e.preventDefault();\n      const { value } = e.target;\n  \n      const isExistQuestion =\n        selectedAnswers.length &&\n        selectedAnswers.find((answer) => answer.question === selectedQuestion);\n  \n      if (isExistQuestion && isExistQuestion.answer) {\n        const updatedAnswers = selectedAnswers.map((answer) => {\n          if (answer.question === selectedQuestion) {\n            return { question: selectedQuestion, answer: value };\n          }\n          return answer;\n        });\n        setSelectedAnswers(updatedAnswers);\n      } else {\n        setSelectedAnswers([\n          ...selectedAnswers,\n          { question: selectedQuestion, answer: value },\n        ]);\n      }\n    };\n  \n    const relatedAnswer = (question, selectedAnswers) => {\n      if (selectedAnswers && selectedAnswers.length) {\n        const relatedQuestion = selectedAnswers.find(\n          (answer) => answer.question === question\n        );\n        return (relatedQuestion && relatedQuestion.answer) || \"\";\n      }\n      return \"\";\n    };\n  \n    useEffect(() => {\n      window.scrollTo(0, \"20px\");\n    }, []);\n  \n    return !admittedAnswers || !admittedAnswers.length ? (\n      <>\n    \n        <form onSubmit={handleResult}>\n          \n            <Grid item xs={12}>\n              {quizData.map((quiz) => (\n                <Paper key={quiz.question} className={classes.paper}>\n                 \n                    <span dangerouslySetInnerHTML={createMarkup(quiz.question)} />\n             \n                  <FormControl fullWidth variant=\"outlined\">\n                    <InputLabel id=\"answer-select-label\">\n                      Choose Answer:\n                    </InputLabel>\n                    <Select\n                      required\n                      name=\"answer\"\n                      id=\"answer-select\"\n                      label=\"Select answer\"\n                      value={relatedAnswer(quiz.question, selectedAnswers) || \"\"}\n                      labelId=\"answer-select-label\"\n                      onChange={(e) => handleAnswerChange(e, quiz.question)}\n                    >\n                      {quiz.answers.map((answer) => (\n                        <MenuItem key={answer} value={answer}>\n                          <span dangerouslySetInnerHTML={createMarkup(answer)} />\n                        </MenuItem>\n                      ))}\n                    </Select>\n                  </FormControl>\n                </Paper>\n              ))}\n              <Button\n                className={classes.submitButton}\n                variant=\"contained\"\n                type=\"submit\"\n              >\n                Result\n              </Button>\n            </Grid>\n        \n        </form>\n      </>\n    ) : (\n      <TotalResults\n        classes={classes}\n        resetQuiz={resetQuiz}\n        currentQuizStep={currentQuizStep}\n        admittedAnswers={admittedAnswers}\n        setCurrentQuizStep={setCurrentQuizStep}\n      />\n    );\n  };\n  \n  export default QuizAnswers;","import {\n  Grid,\n  Paper,\n  Select,\n  Button,\n  MenuItem,\n  TextField,\n  Container,\n  Typography,\n  InputLabel,\n  FormControl,\n} from \"@material-ui/core\";\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { styles, difficulties, createMarkup } from \"../style\";\nimport QuizAnswers from \"./QuizAnswers\";\nimport { borders } from '@material-ui/system';\nimport React from 'react';\nimport { render } from 'react-dom';\n\nclass newLevels extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n    this.state = { random: 0};\n  }\n\n  handleClick() {\n    const min = 1;\n    const max = 200;\n    const randomize = min + Math.random() / (max - min);\n    this.setState({ random: this.state.random + randomize });\n  }\n\n  render() {\n    return (\n      <div>\n        <button onClick={this.handleClick.bind(this)}>Click</button>\n        <div>The number is: {this.state.random}</div>\n      </div>\n    );\n  }\n}\nconst useStyles = makeStyles((theme) => {\n  return styles;\n});\n\nconst QuizCategories = () => {\n  const [categories, setCategories] = useState([]);\n  const [category, setCategory] = useState({ id: \"\", name: \"\" });\n\n  const [quizNumber, setQuizNumber] = useState(null);\n  const [difficulty, setDifficulty] = useState({ id: \"\", name: \"\" });\n  \n\n  const [quizData, setQuizData] = useState([]);\n  const classes = useStyles();\n\n  const [currentQuizStep, setCurrentQuizStep] = useState(\"start\");\n\n  const fetchQuizData = async () => {\n    try {\n      const url = `https://opentdb.com/api.php?amount=${quizNumber}&category=${\n        category.id\n      }&difficulty=${difficulty.name.toLowerCase()}`;\n      const { data } = await axios.get(url);\n\n      const formattedCategory = data.results.map((cat) => {\n\n        const incorrectAnswersIndexes = cat.incorrect_answers.length;\n        const randomIndex = Math.round(\n          Math.random() * (incorrectAnswersIndexes - 0) + 0\n        );\n\n        cat.incorrect_answers.splice(randomIndex, 0, cat.correct_answer);\n        \n        return {\n          ...cat,\n          answers: cat.incorrect_answers,\n        };\n      });\n\n      setQuizData(formattedCategory);\n      setCurrentQuizStep(\"results\");\n    } catch (error) {\n      console.log(\"Fetch quiz error =====>>>>\", error);\n    }\n  };\n\n  const fetchCategories = async () => {\n    const { data } = await axios.get(`https://opentdb.com/api_category.php`);\n    setCategories(data.trivia_categories);\n  };\n\n  useEffect(() => {\n    fetchCategories();\n    window.scrollTo(0, \"20px\");\n  }, []);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (!quizData.length && quizNumber && category.id && difficulty) {\n      fetchQuizData();\n    }\n  };\n\n  const handleSelectChange = (e) => {\n    e.preventDefault();\n    const selectedCategory = categories.find(\n      (cat) => cat.id === e.target.value\n    );\n    setCategory(selectedCategory);\n  };\n  \n\n  const handleDifficultyChange = (e) => {\n    e.preventDefault();\n    const selectedDifficulty = difficulties.find(\n      (diff) => diff.id === e.target.value\n    );\n    setDifficulty(selectedDifficulty);\n  };\n\n  const handleChange = (e) => {\n    e.preventDefault();\n    setQuizNumber(e.target.value);\n  };\n\n  const resetQuiz = (e) => {\n    e.preventDefault();\n    setQuizData([]);\n    setCategory(\"\");\n    setQuizNumber(\"\");\n    setDifficulty(\"\");\n    setCurrentQuizStep(\"start\");\n    window.scrollTo(0, \"20px\");\n  };\n\n  if (!categories.length) {\n    return null;\n  }\n\n  return (\n    \n    <Grid>\n     \n        {currentQuizStep === \"start\" ? (\n          <>\n          \n            <Typography variant=\"h1\" className={classes.mainTitle}>\n              <b>TRIVIA GAME ðŸ˜ˆ</b>\n            </Typography>\n            <form onSubmit={handleSubmit}>\n              <Grid container spacing={4}>\n                <Grid item xs={12}>\n                <Grid item xs={12}></Grid>\n                <Typography variant=\"h5\" className={classes.title}>\n        <b>Category:</b>\n      </Typography>\n      \n                  <FormControl fullWidth variant=\"outlined\">\n                 \n                    <InputLabel id=\"category-select-label\">\n                    <b>Click here!</b>\n                    </InputLabel>\n                    <Select\n                      required\n                    \n                      value={category.id || \"\"}\n                      id=\"category-select\"\n                      label=\"Select category\"\n                    \n                      onChange={handleSelectChange}\n                    >\n                      {categories.map((category) => (\n                        <MenuItem key={category.id} value={category.id}>\n                          <span\n                            dangerouslySetInnerHTML={createMarkup(\n                              category.name\n                            )}\n                          />\n                        </MenuItem>\n                      ))}\n                    </Select>\n                  </FormControl>\n                </Grid>\n                <Grid item xs={12}>\n                <Typography variant=\"h5\" className={classes.title}>\n        <b>Difficulty:</b>\n      </Typography>\n                  <FormControl fullWidth variant=\"outlined\">\n                    <InputLabel id=\"difficulty-select-label\">\n                      <b>Click here!</b>\n                    </InputLabel>\n                    <Select\n                      required\n                      name=\"difficulty\"\n                      \n                      id=\"difficulty-select\"\n                      label=\"Select Difficulty\"\n                    \n                     \n                    >\n                      {difficulties.map((difficulty) => (\n                        <MenuItem key={difficulty.id} value={difficulty.id}>\n                          {difficulty.name}\n                        </MenuItem>\n                      ))}\n                    </Select>\n                  </FormControl>\n                \n                \n                </Grid>\n                <Grid item xs={12}>\n                <Typography variant=\"h5\" className={classes.title}>\n        <b>How many questions would you like? (1-10)*</b>\n      </Typography>\n                  <TextField\n                    inputProps={{ min: 1, max: 10 }}\n                    required\n                    fullWidth\n                    type=\"number\"\n                    id=\"quiz-number\"\n                    variant=\"outlined\"\n                    name=\"quiz-number\"\n                    \n                    value={quizNumber || \"\"}\n                   \n                    onChange={handleChange}\n                  />\n                </Grid>\n              </Grid>\n              <Button\n                className={classes.submitButton}\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n              >\n                Let's Start!\n              </Button>\n            </form>\n          </>\n        ) : (\n          <QuizAnswers\n            classes={classes}\n            quizData={quizData}\n            resetQuiz={resetQuiz}\n            categories={categories}\n            currentQuizStep={currentQuizStep}\n            setCurrentQuizStep={setCurrentQuizStep}\n          />\n        )}\n  \n   \n    </Grid>\n  );\n};\n\nexport default QuizCategories;\n","\nimport QuizCate from \"./components/QuizCate\"\n\nfunction App() {\n  return (\n    <div><QuizCate></QuizCate>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}